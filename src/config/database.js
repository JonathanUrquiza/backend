// Configuraci√≥n de Sequelize para MySQL
const { Sequelize } = require('sequelize');
// Cargar variables de entorno
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}

const pc = require('picocolors');

// Configuraci√≥n para MySQL (AlwaysData)
const DB_HOST = process.env.DB_HOST || 'mysql-funkotest.alwaysdata.net';
const DB_PORT = process.env.DB_PORT || 3306;
const DB_NAME = process.env.DB_NAME || 'funkotest_fiscalizar';
const DB_USER = process.env.DB_USER || 'funkotest';
const DB_PASSWORD = process.env.DB_PASSWORD || 'rootJonas';

console.log(pc.blue('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
console.log(pc.blue('üì¶ CONFIGURACI√ìN DE BASE DE DATOS MySQL'));
console.log(pc.blue('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
console.log(pc.cyan(`üîó Host: ${DB_HOST}`));
console.log(pc.cyan(`üîó Puerto: ${DB_PORT}`));
console.log(pc.cyan(`üîó Base de datos: ${DB_NAME}`));
console.log(pc.cyan(`üîó Usuario: ${DB_USER}`));
console.log(pc.cyan(`üîó Password: ${'*'.repeat(DB_PASSWORD.length)}`));
console.log(pc.blue('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));

const sequelize = new Sequelize(DB_NAME, DB_USER, DB_PASSWORD, {
    host: DB_HOST,
    port: DB_PORT,
    dialect: 'mysql',
    logging: process.env.NODE_ENV === 'development' ? 
        (sql) => console.log(pc.gray(`[SQL] ${sql}`)) : false,
    define: {
        timestamps: false,
        freezeTableName: true
    },
    pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
    },
    dialectOptions: {
        connectTimeout: 60000
    }
});

console.log(pc.cyan(`‚ú® Instancia Sequelize creada correctamente`));

// Event listeners para monitorear el pool (se configuran despu√©s de la primera conexi√≥n)
const setupPoolListeners = () => {
    try {
        if (sequelize.connectionManager && sequelize.connectionManager.pool) {
            sequelize.connectionManager.pool.on('acquire', (connection) => {
                console.log(pc.green(`üîå Conexi√≥n MySQL adquirida del pool (ID: ${connection.threadId})`));
            });

            sequelize.connectionManager.pool.on('release', (connection) => {
                console.log(pc.yellow(`üîå Conexi√≥n MySQL liberada al pool (ID: ${connection.threadId})`));
            });

            sequelize.connectionManager.pool.on('error', (error) => {
                console.error(pc.red('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
                console.error(pc.red('‚ùå ERROR EN EL POOL DE CONEXIONES MySQL'));
                console.error(pc.red('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
                console.error(pc.red(`‚ùå Mensaje: ${error.message}`));
                console.error(pc.red(`‚ùå C√≥digo: ${error.code || 'N/A'}`));
                console.error(pc.gray(error.stack));
                console.error(pc.red('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
            });

            console.log(pc.cyan(`üìä Event listeners del pool configurados correctamente`));
        }
    } catch (error) {
        console.log(pc.yellow(`‚ö†Ô∏è  No se pudieron configurar los listeners del pool: ${error.message}`));
    }
};

// Funci√≥n para probar la conexi√≥n con Sequelize
const testConnection = async () => {
    console.log(pc.blue('\nüîç Probando conexi√≥n a MySQL...'));
    try {
        const startTime = Date.now();
        await sequelize.authenticate();
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log(pc.green('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
        console.log(pc.green('‚úÖ CONEXI√ìN A MySQL EXITOSA'));
        console.log(pc.green('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
        console.log(pc.cyan(`üìä Base de datos: ${DB_NAME}`));
        console.log(pc.cyan(`üåê Host: ${DB_HOST}:${DB_PORT}`));
        console.log(pc.cyan(`‚è±Ô∏è  Tiempo de conexi√≥n: ${duration}ms`));
        console.log(pc.cyan(`üî¢ Pool m√°x: 5 conexiones`));
        console.log(pc.green('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
        
        return true;
    } catch (error) {
        console.error(pc.red('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
        console.error(pc.red('‚ùå ERROR CONECTANDO A MySQL'));
        console.error(pc.red('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
        console.error(pc.red(`‚ùå Mensaje: ${error.message}`));
        console.error(pc.red(`‚ùå C√≥digo: ${error.code || 'N/A'}`));
        console.error(pc.red(`‚ùå Host: ${DB_HOST}:${DB_PORT}`));
        console.error(pc.red(`‚ùå Base de datos: ${DB_NAME}`));
        console.error(pc.red(`‚ùå Usuario: ${DB_USER}`));
        
        if (error.original) {
            console.error(pc.red(`‚ùå Error original: ${error.original.message}`));
            console.error(pc.red(`‚ùå C√≥digo error original: ${error.original.code}`));
        }
        
        console.error(pc.red('\nüìö Stack trace:'));
        console.error(pc.gray(error.stack));
        console.error(pc.red('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
        
        return false;
    }
};

// Funci√≥n para sincronizar modelos con la base de datos
const syncDatabase = async (options = {}) => {
    console.log(pc.blue('üîÑ Iniciando sincronizaci√≥n de modelos...'));
    try {
        const startTime = Date.now();
        await sequelize.sync(options);
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log(pc.green('‚úÖ Base de datos sincronizada correctamente'));
        console.log(pc.cyan(`‚è±Ô∏è  Tiempo de sincronizaci√≥n: ${duration}ms`));
        
        if (options.force) {
            console.log(pc.yellow('‚ö†Ô∏è  Modo FORCE activado: todas las tablas fueron eliminadas y recreadas'));
        }
        if (options.alter) {
            console.log(pc.yellow('‚ö†Ô∏è  Modo ALTER activado: las tablas fueron alteradas para coincidir con los modelos'));
        }
        
        return true;
    } catch (error) {
        console.error(pc.red('‚ùå Error sincronizando base de datos:'));
        console.error(pc.red(`   Mensaje: ${error.message}`));
        console.error(pc.red(`   C√≥digo: ${error.code || 'N/A'}`));
        
        if (error.original) {
            console.error(pc.red(`   Error original: ${error.original.message}`));
        }
        
        console.error(pc.gray(error.stack));
        return false;
    }
};

// Funci√≥n para cerrar conexi√≥n
const closeConnection = async () => {
    console.log(pc.yellow('üîå Cerrando conexi√≥n a MySQL...'));
    try {
        await sequelize.close();
        console.log(pc.green('‚úÖ Conexi√≥n MySQL cerrada correctamente'));
        console.log(pc.cyan('   Todas las conexiones del pool han sido liberadas'));
        return true;
    } catch (error) {
        console.error(pc.red('‚ùå Error cerrando conexi√≥n MySQL:'));
        console.error(pc.red(`   Mensaje: ${error.message}`));
        console.error(pc.gray(error.stack));
        return false;
    }
};

// Inicializar la conexi√≥n al cargar el m√≥dulo
console.log(pc.blue('\nüöÄ Inicializando m√≥dulo de base de datos...'));
testConnection().then((success) => {
    if (success) {
        // Configurar listeners del pool despu√©s de la primera conexi√≥n exitosa
        setupPoolListeners();
        console.log(pc.green('‚ú® M√≥dulo de base de datos inicializado correctamente\n'));
    } else {
        console.log(pc.red('‚ö†Ô∏è  M√≥dulo de base de datos inicializado con errores\n'));
    }
});

// Export de instancia de Sequelize y funciones principales
module.exports = {
    sequelize,         // Instancia principal de Sequelize
    Sequelize,         // Constructor de Sequelize para tipos de datos
    testConnection,    // Funci√≥n para verificar conectividad
    syncDatabase,      // Funci√≥n para sincronizar modelos
    closeConnection    // Funci√≥n para cerrar conexi√≥n
};